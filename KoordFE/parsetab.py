
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '6226AB70A792D31BBD40DCE8F6C12661'
    
_lr_action_items = {'LID':([2,5,6,8,9,10,11,13,16,17,21,23,27,28,35,36,40,41,42,43,44,45,51,55,58,64,69,80,86,89,91,92,110,117,119,123,125,127,132,134,135,136,138,139,140,141,146,147,148,150,151,154,155,175,179,181,186,187,188,189,191,192,193,194,195,196,199,210,214,219,223,224,225,226,227,229,233,236,239,],[-100,-100,-100,-9,-7,-8,-100,-16,-100,-18,-100,-20,-4,-100,54,-42,-37,-36,-38,-39,-40,61,61,54,76,-15,-17,61,61,76,-19,61,-10,-59,-57,61,61,-58,-3,61,61,61,61,61,61,61,-41,-61,-62,-68,61,61,-60,61,61,61,61,61,-96,-98,-97,-99,-95,-94,61,61,-69,61,-63,-70,-100,-46,61,-45,-64,-67,61,61,-66,]),'DEDENT':([31,33,39,46,47,48,49,50,52,59,60,66,67,68,78,79,82,84,86,117,118,119,120,123,127,137,142,147,148,149,150,155,169,170,171,184,185,186,199,204,205,210,214,218,219,220,222,223,227,229,231,233,235,236,237,238,239,],[-100,-100,-100,64,-22,-100,-100,69,-26,-100,-21,-100,-12,-25,91,-24,110,-14,-100,-59,146,-57,-56,-100,-58,-23,-100,-61,-62,-55,-68,-60,184,-100,-27,-11,204,-100,-69,-13,214,-100,-63,223,-70,224,226,-100,-64,-67,-48,-100,237,-100,-47,239,-66,]),'CID':([1,14,80,86,92,117,119,123,125,127,134,135,136,138,139,140,141,147,148,150,151,154,155,175,179,181,186,187,188,189,191,192,193,194,195,196,199,210,214,219,223,225,227,229,233,236,239,],[4,19,94,115,94,-59,-57,115,94,-58,94,94,94,94,94,94,94,-61,-62,-68,94,94,-60,94,201,94,115,94,-96,-98,-97,-99,-95,-94,94,94,-69,115,-63,-70,-100,115,-64,-67,115,115,-66,]),'FNUM':([80,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,188,189,191,192,193,194,195,196,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-96,-98,-97,-99,-95,-94,95,95,]),'ALLREAD':([2,5,6,8,9,10,11,13,64,110,],[-100,-100,-100,-9,-7,-8,15,-16,-15,-10,]),'RPAR':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,133,134,135,153,157,158,159,160,161,162,163,165,166,167,168,173,174,180,182,183,190,197,200,203,206,207,208,209,215,216,217,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,157,-100,-100,-54,-85,-32,-31,-33,180,-34,182,-75,-72,-73,-74,190,157,-65,-30,-77,-53,209,211,-35,215,216,217,-52,-49,-50,-51,]),'LCURLY':([37,],[58,]),'ATOMIC':([86,117,119,123,127,147,148,150,155,186,199,210,214,219,223,225,227,229,233,236,239,],[116,-59,-57,116,-58,-61,-62,-68,-60,116,-69,116,-63,-70,-100,116,-64,-67,116,116,-66,]),'NULL':([80,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,188,189,191,192,193,194,195,196,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-96,-98,-97,-99,-95,-94,104,104,]),'MINUS':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,133,153,157,162,164,165,166,167,168,174,177,180,182,183,201,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,141,-89,141,141,-85,141,141,-75,-72,-73,-74,141,141,-65,-30,-77,-86,]),'IPOS':([31,33,39,49,59,79,137,142,170,171,],[43,43,43,43,43,-24,-23,43,43,-27,]),'DEF':([2,5,6,8,9,10,11,13,16,17,21,23,64,69,91,110,],[-100,-100,-100,-9,-7,-8,-100,-16,-100,-18,29,-20,-15,-17,-19,-10,]),'RBRACE':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,112,113,114,157,164,165,166,167,168,180,182,183,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,-28,-29,144,-85,183,-75,-72,-73,-74,-65,-30,-77,]),'PRE':([129,],[156,]),'GEQ':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,165,166,167,168,173,174,180,182,183,190,209,215,216,217,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,-85,-75,-72,-73,-74,188,-54,-65,-30,-77,-53,-52,-49,-50,-51,]),'NL':([4,18,20,25,30,53,61,62,63,72,81,88,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,121,122,124,128,144,145,153,157,165,166,167,168,176,177,180,182,183,190,201,202,209,211,215,216,217,225,232,],[9,24,26,32,38,71,-91,79,-92,87,109,130,132,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,137,-89,143,147,148,150,155,171,172,-54,-85,-75,-72,-73,-74,198,199,-65,-30,-77,-53,212,213,-52,219,-49,-50,-51,230,234,]),'RCURLY':([76,77,131,],[-6,90,-5,]),'EQ':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,165,166,167,168,173,174,180,182,183,190,209,215,216,217,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,-85,-75,-72,-73,-74,194,-54,-65,-30,-77,-53,-52,-49,-50,-51,]),'PID':([80,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,188,189,191,192,193,194,195,196,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-96,-98,-97,-99,-95,-94,100,100,]),'LT':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,165,166,167,168,173,174,180,182,183,190,209,215,216,217,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,-85,-75,-72,-73,-74,192,-54,-65,-30,-77,-53,-52,-49,-50,-51,]),'AGENT':([0,],[1,]),'ASGN':([61,62,63,126,],[-91,80,-92,154,]),'INIT':([2,5,6,8,9,10,11,13,16,17,21,23,27,28,64,69,91,110,132,],[-100,-100,-100,-9,-7,-8,-100,-16,-100,-18,-100,-20,-4,34,-15,-17,-19,-10,-3,]),'NUM':([2,5,6,8,9,10,11,13,16,17,21,23,27,28,35,36,55,56,57,64,69,73,91,110,132,146,224,226,],[-100,-100,-100,-9,-7,-8,-100,-16,-100,-18,-100,-20,-4,-100,-100,-42,-100,75,-44,-15,-17,-43,-19,-10,-3,-41,-46,-45,]),'COLON':([12,15,19,22,34,54,61,63,65,83,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,116,152,153,156,157,165,166,167,168,180,182,183,190,209,215,216,217,221,228,],[18,20,25,30,53,72,-91,-92,81,111,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,145,176,-54,179,-85,-75,-72,-73,-74,-65,-30,-77,-53,-52,-49,-50,-51,225,232,]),'EFF':([212,213,],[221,221,]),'PLUS':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,133,153,157,162,164,165,166,167,168,174,177,180,182,183,201,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,139,-89,139,139,-85,139,139,-75,-72,-73,-74,139,139,-65,-30,-77,-86,]),'NEQ':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,165,166,167,168,173,174,180,182,183,190,209,215,216,217,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,-85,-75,-72,-73,-74,193,-54,-65,-30,-77,-53,-52,-49,-50,-51,]),'BY':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,133,153,157,162,164,165,166,167,168,174,177,180,182,183,201,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,138,-89,138,138,-85,138,138,-75,138,-73,138,138,138,-65,-30,-77,-86,]),'LPAR':([61,63,80,92,94,106,115,125,126,134,135,136,138,139,140,141,151,154,175,178,179,181,187,188,189,191,192,193,194,195,196,201,],[-91,-92,92,92,134,135,134,151,135,92,92,92,92,92,92,92,151,92,151,200,151,92,151,-96,-98,-97,-99,-95,-94,151,151,134,]),'STAGE':([29,40,41,42,43,44,45,51,80,86,92,117,119,123,125,127,134,135,136,138,139,140,141,147,148,150,151,154,155,175,179,181,186,187,188,189,191,192,193,194,195,196,199,210,214,219,223,225,227,229,233,236,239,],[37,-37,-36,-38,-39,-40,63,63,63,63,63,-59,-57,63,63,-58,63,63,63,63,63,63,63,-61,-62,-68,63,63,-60,63,63,63,63,63,-96,-98,-97,-99,-95,-94,63,63,-69,63,-63,-70,-100,63,-64,-67,63,63,-66,]),'GT':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,165,166,167,168,173,174,180,182,183,190,209,215,216,217,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,-85,-75,-72,-73,-74,189,-54,-65,-30,-77,-53,-52,-49,-50,-51,]),'STRING':([31,33,39,49,59,79,137,142,170,171,],[40,40,40,40,40,-24,-23,40,40,-27,]),'ACTUATORS':([48,],[65,]),'MODULE':([7,],[14,]),'TIMES':([61,63,85,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,133,153,157,162,164,165,166,167,168,174,177,180,182,183,201,],[-91,-92,112,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,140,-89,140,140,-85,140,140,-75,140,-73,140,140,140,-65,-30,-77,-86,]),'COMMA':([61,63,76,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,162,165,166,167,168,180,182,183,],[-91,-92,89,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,-85,181,-75,-72,-73,-74,-65,-30,-77,]),'GETINPUT':([154,],[178,]),'PASS':([86,117,119,123,127,147,148,150,155,186,199,210,214,219,223,225,227,229,233,236,239,],[124,-59,-57,124,-58,-61,-62,-68,-60,124,-69,124,-63,-70,-100,124,-64,-67,124,124,-66,]),'FALSE':([80,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,188,189,191,192,193,194,195,196,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-96,-98,-97,-99,-95,-94,105,105,]),'ELSE':([223,],[228,]),'LOCAL':([2,5,6,8,9,10,11,13,16,17,64,69,110,],[-100,-100,-100,-9,-7,-8,-100,-16,22,-18,-15,-17,-10,]),'SENSORS':([48,66,67,184,],[-100,83,-12,-11,]),'TRUE':([80,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,188,189,191,192,193,194,195,196,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-96,-98,-97,-99,-95,-94,99,99,]),'IF':([86,117,119,123,127,147,148,150,155,186,199,210,214,219,223,225,227,229,233,236,239,],[125,-59,-57,125,-58,-61,-62,-68,-60,125,-69,125,-63,-70,-100,125,-64,-67,125,125,-66,]),'AND':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,165,166,167,168,173,174,180,182,183,190,209,215,216,217,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,-85,-75,-72,-73,-74,187,-54,-65,-30,-77,-53,-52,-49,-50,-51,]),'LBRACE':([61,63,70,106,],[-91,-92,85,136,]),'INDENT':([24,26,32,38,71,87,109,143,172,198,230,234,],[31,33,48,59,86,129,142,170,186,210,233,236,]),'INT':([31,33,39,49,59,79,137,142,170,171,],[41,41,41,41,41,-24,-23,41,41,-27,]),'FLOAT':([31,33,39,49,59,79,137,142,170,171,],[42,42,42,42,42,-24,-23,42,42,-27,]),'LEQ':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,165,166,167,168,173,174,180,182,183,190,209,215,216,217,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,-85,-75,-72,-73,-74,191,-54,-65,-30,-77,-53,-52,-49,-50,-51,]),'BOOLEAN':([31,33,39,49,59,79,137,142,170,171,],[44,44,44,44,44,-24,-23,44,44,-27,]),'EXIT':([86,117,119,123,127,147,148,150,155,186,199,210,214,219,223,225,227,229,233,236,239,],[128,-59,-57,128,-58,-61,-62,-68,-60,128,-69,128,-63,-70,-100,128,-64,-67,128,128,-66,]),'INUM':([75,80,85,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,188,189,191,192,193,194,195,196,],[88,108,113,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-96,-98,-97,-99,-95,-94,108,108,]),'NOT':([151,],[175,]),'USING':([2,5,9,110,],[7,7,-7,-10,]),'ALLWRITE':([2,5,6,8,9,10,110,],[-100,-100,12,-9,-7,-8,-10,]),'$end':([3,74,130,],[0,-1,-2,]),'OR':([61,63,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,165,166,167,168,173,174,180,182,183,190,209,215,216,217,],[-91,-92,-71,-86,-90,-80,-78,-81,-87,-79,-82,-83,-84,-93,-88,-76,-89,-85,-75,-72,-73,-74,195,-54,-65,-30,-77,-53,-52,-49,-50,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([31,39,59,142,170,],[39,39,39,39,39,]),'program':([0,],[3,]),'bracketexp':([80,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,195,196,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'elseblock':([223,],[227,]),'module':([2,5,],[5,5,]),'owner':([85,],[114,]),'num':([80,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,195,196,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'cond':([125,151,175,179,187,195,196,],[152,173,197,202,206,207,208,]),'pass':([86,123,186,210,225,233,236,],[117,117,117,117,117,117,117,]),'rvdecls':([33,49,],[50,68,]),'ardecls':([11,],[16,]),'event':([35,55,],[55,55,]),'rvdecl':([33,49,],[49,49,]),'bval':([80,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,195,196,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'stmts':([86,123,186,210,233,236,],[118,149,205,218,235,238,]),'locdecls':([16,],[21,]),'asgn':([86,123,186,210,225,233,236,],[119,119,119,119,119,119,119,]),'actuatordecls':([48,],[66,]),'init':([28,],[35,]),'Numdecl':([56,],[74,]),'awdecls':([6,],[11,]),'noargs':([134,135,],[158,158,]),'neargs':([134,135,181,],[159,159,203,]),'type':([31,33,39,49,59,142,170,],[45,51,45,51,45,45,45,]),'events':([35,55,],[56,73,]),'empty':([2,5,6,11,16,21,28,31,33,35,39,48,49,55,59,66,86,123,134,135,142,170,186,210,223,233,236,],[8,8,13,17,23,27,36,47,52,57,47,67,52,57,47,84,120,120,160,160,47,47,120,120,229,120,120,]),'effblock':([212,213,],[220,222,]),'moduleflag':([80,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,195,196,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'exp':([80,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,195,196,],[107,133,153,162,162,164,165,166,167,168,174,177,153,153,162,153,153,153,]),'funccall':([80,86,92,123,125,134,135,136,138,139,140,141,151,154,175,179,181,186,187,195,196,210,225,233,236,],[102,121,102,121,102,102,102,102,102,102,102,102,102,102,102,102,102,121,102,102,102,121,121,121,121,]),'modulefunccall':([80,86,92,123,125,134,135,136,138,139,140,141,151,154,175,179,181,186,187,195,196,210,225,233,236,],[103,122,103,122,103,103,103,103,103,103,103,103,103,103,103,103,103,122,103,103,103,122,122,122,122,]),'args':([134,135,],[161,163,]),'null':([80,92,125,134,135,136,138,139,140,141,151,154,175,179,181,187,195,196,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'stmt':([86,123,186,210,225,233,236,],[123,123,123,123,231,123,123,]),'agent':([0,],[2,]),'stagelist':([58,89,],[77,131,]),'varname':([45,51,80,86,92,123,125,134,135,136,138,139,140,141,151,154,175,179,181,186,187,195,196,210,225,233,236,],[62,70,106,126,106,126,106,106,106,106,106,106,106,106,106,106,106,106,106,126,106,106,106,126,126,126,126,]),'modules':([2,5,],[6,10,]),'wptstmt':([86,123,186,210,225,233,236,],[127,127,127,127,127,127,127,]),'stagedecl':([21,],[28,]),'sensordecls':([66,],[82,]),'decls':([31,39,59,142,170,],[46,60,78,169,185,]),'op':([173,],[196,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> agent modules awdecls ardecls locdecls stagedecl init events Numdecl','program',9,'p_program','symparser.py',8),
  ('Numdecl -> NUM INUM NL','Numdecl',3,'p_Numdecl','symparser.py',13),
  ('stagedecl -> DEF STAGE LCURLY stagelist RCURLY NL','stagedecl',6,'p_stagedecl','symparser.py',18),
  ('stagedecl -> empty','stagedecl',1,'p_stagedecl','symparser.py',19),
  ('stagelist -> LID COMMA stagelist','stagelist',3,'p_stagelist','symparser.py',24),
  ('stagelist -> LID','stagelist',1,'p_stagelist','symparser.py',25),
  ('agent -> AGENT CID NL','agent',3,'p_agent','symparser.py',32),
  ('modules -> module modules','modules',2,'p_modules','symparser.py',37),
  ('modules -> empty','modules',1,'p_modules','symparser.py',38),
  ('module -> USING MODULE CID COLON NL INDENT actuatordecls sensordecls DEDENT','module',9,'p_module','symparser.py',50),
  ('actuatordecls -> ACTUATORS COLON NL INDENT decls DEDENT','actuatordecls',6,'p_actuatordecls','symparser.py',61),
  ('actuatordecls -> empty','actuatordecls',1,'p_actuatordecls','symparser.py',62),
  ('sensordecls -> SENSORS COLON NL INDENT decls DEDENT','sensordecls',6,'p_sensordecls','symparser.py',70),
  ('sensordecls -> empty','sensordecls',1,'p_sensordecls','symparser.py',71),
  ('awdecls -> ALLWRITE COLON NL INDENT decls DEDENT','awdecls',6,'p_awdecls','symparser.py',79),
  ('awdecls -> empty','awdecls',1,'p_awdecls','symparser.py',80),
  ('ardecls -> ALLREAD COLON NL INDENT rvdecls DEDENT','ardecls',6,'p_ardecls','symparser.py',90),
  ('ardecls -> empty','ardecls',1,'p_ardecls','symparser.py',91),
  ('locdecls -> LOCAL COLON NL INDENT decls DEDENT','locdecls',6,'p_locdecls','symparser.py',101),
  ('locdecls -> empty','locdecls',1,'p_locdecls','symparser.py',102),
  ('decls -> decl decls','decls',2,'p_decls','symparser.py',110),
  ('decls -> empty','decls',1,'p_decls','symparser.py',111),
  ('decl -> type varname ASGN exp NL','decl',5,'p_decl','symparser.py',120),
  ('decl -> type varname NL','decl',3,'p_decl','symparser.py',121),
  ('rvdecls -> rvdecl rvdecls','rvdecls',2,'p_rvdecls','symparser.py',129),
  ('rvdecls -> empty','rvdecls',1,'p_rvdecls','symparser.py',130),
  ('rvdecl -> type varname LBRACE owner RBRACE NL','rvdecl',6,'p_rvdecl','symparser.py',140),
  ('owner -> TIMES','owner',1,'p_owner','symparser.py',145),
  ('owner -> INUM','owner',1,'p_owner','symparser.py',146),
  ('funccall -> varname LPAR args RPAR','funccall',4,'p_funccall','symparser.py',150),
  ('args -> neargs','args',1,'p_args','symparser.py',154),
  ('args -> noargs','args',1,'p_args','symparser.py',155),
  ('noargs -> empty','noargs',1,'p_noargs','symparser.py',160),
  ('neargs -> exp','neargs',1,'p_neargs','symparser.py',164),
  ('neargs -> exp COMMA neargs','neargs',3,'p_neargs','symparser.py',165),
  ('type -> INT','type',1,'p_type','symparser.py',176),
  ('type -> STRING','type',1,'p_type','symparser.py',177),
  ('type -> FLOAT','type',1,'p_type','symparser.py',178),
  ('type -> IPOS','type',1,'p_type','symparser.py',179),
  ('type -> BOOLEAN','type',1,'p_type','symparser.py',180),
  ('init -> INIT COLON NL INDENT stmts DEDENT','init',6,'p_init','symparser.py',187),
  ('init -> empty','init',1,'p_init','symparser.py',188),
  ('events -> event events','events',2,'p_events','symparser.py',194),
  ('events -> empty','events',1,'p_events','symparser.py',195),
  ('event -> LID COLON NL INDENT PRE COLON cond NL effblock DEDENT','event',10,'p_event','symparser.py',200),
  ('event -> LID COLON NL INDENT PRE COLON CID NL effblock DEDENT','event',10,'p_event','symparser.py',201),
  ('effblock -> EFF COLON NL INDENT stmts DEDENT','effblock',6,'p_effblock','symparser.py',206),
  ('effblock -> EFF COLON stmt','effblock',3,'p_effblock','symparser.py',207),
  ('cond -> LPAR cond AND cond RPAR','cond',5,'p_cond','symparser.py',212),
  ('cond -> LPAR cond OR cond RPAR','cond',5,'p_cond','symparser.py',213),
  ('cond -> LPAR cond op cond RPAR','cond',5,'p_cond','symparser.py',214),
  ('cond -> LPAR NOT cond RPAR','cond',4,'p_cond','symparser.py',215),
  ('cond -> LPAR cond RPAR','cond',3,'p_cond','symparser.py',216),
  ('cond -> exp','cond',1,'p_cond','symparser.py',217),
  ('stmts -> stmt stmts','stmts',2,'p_stmts','symparser.py',222),
  ('stmts -> empty','stmts',1,'p_stmts','symparser.py',223),
  ('stmt -> asgn','stmt',1,'p_stmt','symparser.py',228),
  ('stmt -> wptstmt','stmt',1,'p_stmt','symparser.py',229),
  ('stmt -> pass','stmt',1,'p_stmt','symparser.py',230),
  ('stmt -> EXIT NL','stmt',2,'p_stmt','symparser.py',231),
  ('stmt -> funccall NL','stmt',2,'p_stmt','symparser.py',232),
  ('stmt -> modulefunccall NL','stmt',2,'p_stmt','symparser.py',233),
  ('stmt -> ATOMIC COLON NL INDENT stmts DEDENT','stmt',6,'p_stmt','symparser.py',234),
  ('stmt -> IF cond COLON NL INDENT stmts DEDENT elseblock','stmt',8,'p_stmt','symparser.py',235),
  ('modulefunccall -> CID LPAR args RPAR','modulefunccall',4,'p_modulefunccall','symparser.py',240),
  ('elseblock -> ELSE COLON NL INDENT stmts DEDENT','elseblock',6,'p_elseblock','symparser.py',244),
  ('elseblock -> empty','elseblock',1,'p_elseblock','symparser.py',245),
  ('pass -> PASS NL','pass',2,'p_pass','symparser.py',250),
  ('asgn -> varname ASGN exp NL','asgn',4,'p_asgn','symparser.py',253),
  ('wptstmt -> varname ASGN GETINPUT LPAR RPAR NL','wptstmt',6,'p_wptstmt','symparser.py',259),
  ('exp -> bracketexp','exp',1,'p_exp','symparser.py',266),
  ('exp -> exp PLUS exp','exp',3,'p_exp','symparser.py',267),
  ('exp -> exp TIMES exp','exp',3,'p_exp','symparser.py',268),
  ('exp -> exp MINUS exp','exp',3,'p_exp','symparser.py',269),
  ('exp -> exp BY exp','exp',3,'p_exp','symparser.py',270),
  ('exp -> varname','exp',1,'p_exp','symparser.py',271),
  ('exp -> varname LBRACE exp RBRACE','exp',4,'p_exp','symparser.py',272),
  ('exp -> bval','exp',1,'p_exp','symparser.py',273),
  ('exp -> PID','exp',1,'p_exp','symparser.py',274),
  ('exp -> num','exp',1,'p_exp','symparser.py',275),
  ('exp -> null','exp',1,'p_exp','symparser.py',276),
  ('exp -> moduleflag','exp',1,'p_exp','symparser.py',277),
  ('exp -> funccall','exp',1,'p_exp','symparser.py',278),
  ('exp -> modulefunccall','exp',1,'p_exp','symparser.py',279),
  ('bracketexp -> LPAR exp RPAR','bracketexp',3,'p_bracketexp','symparser.py',285),
  ('moduleflag -> CID','moduleflag',1,'p_moduleflag','symparser.py',288),
  ('bval -> TRUE','bval',1,'p_bval','symparser.py',292),
  ('bval -> FALSE','bval',1,'p_bval','symparser.py',293),
  ('num -> INUM','num',1,'p_num','symparser.py',298),
  ('num -> FNUM','num',1,'p_num','symparser.py',299),
  ('varname -> LID','varname',1,'p_varname','symparser.py',304),
  ('varname -> STAGE','varname',1,'p_varname','symparser.py',305),
  ('null -> NULL','null',1,'p_null','symparser.py',309),
  ('op -> EQ','op',1,'p_op','symparser.py',314),
  ('op -> NEQ','op',1,'p_op','symparser.py',315),
  ('op -> GEQ','op',1,'p_op','symparser.py',316),
  ('op -> LEQ','op',1,'p_op','symparser.py',317),
  ('op -> GT','op',1,'p_op','symparser.py',318),
  ('op -> LT','op',1,'p_op','symparser.py',319),
  ('empty -> <empty>','empty',0,'p_empty','symparser.py',324),
]
