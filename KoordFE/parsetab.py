
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '72D2180C9E649F34E53867143DD2D00E'
    
_lr_action_items = {'LID':([2,5,6,8,9,10,11,13,16,17,21,23,27,28,35,36,40,41,42,43,44,45,51,55,57,62,67,78,84,87,89,91,110,117,118,122,123,124,126,131,132,134,135,137,138,139,140,145,146,147,148,150,153,154,175,179,182,186,187,188,189,190,191,192,193,194,195,196,199,209,212,217,220,221,222,223,225,229,232,235,],[-99,-99,-99,-9,-7,-8,-99,-16,-99,-18,-99,-20,-4,-99,54,-42,-37,-36,-38,-39,-40,60,60,54,74,-15,-17,90,60,74,-19,90,-10,-55,-57,60,90,-67,-56,-3,90,90,90,90,90,90,90,-41,60,-58,-59,90,90,-62,90,90,90,60,-69,90,-95,-97,-96,-98,-94,-93,90,90,-66,60,-60,-70,-99,-45,60,-61,-65,60,60,-64,]),'DEDENT':([31,33,39,46,47,48,49,50,52,58,59,64,65,66,76,77,80,82,116,117,118,122,124,126,136,141,147,148,149,154,168,169,170,184,185,187,199,203,204,212,216,217,218,220,223,225,227,231,233,234,235,],[-99,-99,-99,62,-22,-99,-99,67,-26,-99,-21,-99,-12,-25,89,-24,110,-14,145,-55,-57,-54,-67,-56,-23,-99,-58,-59,-53,-62,184,-99,-27,-11,203,-69,-66,-13,212,-60,220,-70,221,-99,-61,-65,-47,233,-46,235,-64,]),'CID':([1,14,78,84,91,117,118,122,123,124,126,132,134,135,137,138,139,140,147,148,150,153,154,175,179,182,186,187,188,189,190,191,192,193,194,195,196,199,209,212,217,220,222,223,225,229,232,235,],[4,19,93,93,93,-55,-57,93,93,-67,-56,93,93,93,93,93,93,93,-58,-59,93,93,-62,93,93,93,93,-69,93,-95,-97,-96,-98,-94,-93,93,93,-66,93,-60,-70,-99,93,-61,-65,93,93,-64,]),'FNUM':([78,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,189,190,191,192,193,194,195,196,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-95,-97,-96,-98,-94,-93,94,94,]),'ALLREAD':([2,5,6,8,9,10,11,13,62,110,],[-99,-99,-99,-9,-7,-8,15,-16,-15,-10,]),'RPAR':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,133,134,135,152,157,158,159,160,161,162,163,164,165,166,167,174,180,181,183,197,200,202,205,206,207,208,213,214,215,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,157,-99,-99,-52,-85,-32,-31,-33,181,-34,183,-75,-72,-73,-74,157,-80,-63,-30,208,210,-35,213,214,215,-51,-48,-49,-50,]),'LCURLY':([37,],[57,]),'ATOMIC':([84,117,118,122,124,126,147,148,154,186,187,199,209,212,217,220,222,223,225,229,232,235,],[115,-55,-57,115,-67,-56,-58,-59,-62,115,-69,-66,115,-60,-70,-99,115,-61,-65,115,115,-64,]),'NULL':([78,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,189,190,191,192,193,194,195,196,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-95,-97,-96,-98,-94,-93,104,104,]),'TRUE':([78,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,189,190,191,192,193,194,195,196,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-95,-97,-96,-98,-94,-93,99,99,]),'IPOS':([31,33,39,49,58,77,136,141,169,170,],[43,43,43,43,43,-24,-23,43,43,-27,]),'DEF':([2,5,6,8,9,10,11,13,16,17,21,23,62,67,89,110,],[-99,-99,-99,-9,-7,-8,-99,-16,-99,-18,29,-20,-15,-17,-19,-10,]),'RBRACE':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,112,113,114,156,157,164,165,166,167,180,181,183,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,-28,-29,143,180,-85,-75,-72,-73,-74,-80,-63,-30,]),'PRE':([128,],[155,]),'GEQ':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,164,165,166,167,173,174,180,181,183,208,213,214,215,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,-85,-75,-72,-73,-74,189,-52,-80,-63,-30,-51,-48,-49,-50,]),'NL':([4,18,20,25,30,53,60,61,70,79,86,88,90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,120,121,127,143,144,152,157,164,165,166,167,172,176,177,180,181,183,201,208,210,213,214,215,222,228,],[9,24,26,32,38,69,-91,77,85,109,129,131,-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,136,-88,142,147,148,154,170,171,-52,-85,-75,-72,-73,-74,187,198,199,-80,-63,-30,211,-51,217,-48,-49,-50,226,230,]),'RCURLY':([74,75,130,],[-6,88,-5,]),'EQ':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,164,165,166,167,173,174,180,181,183,208,213,214,215,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,-85,-75,-72,-73,-74,194,-52,-80,-63,-30,-51,-48,-49,-50,]),'PID':([78,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,189,190,191,192,193,194,195,196,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-95,-97,-96,-98,-94,-93,100,100,]),'LT':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,164,165,166,167,173,174,180,181,183,208,213,214,215,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,-85,-75,-72,-73,-74,192,-52,-80,-63,-30,-51,-48,-49,-50,]),'AGENT':([0,],[1,]),'ASGN':([60,61,119,125,],[-91,78,146,153,]),'INIT':([2,5,6,8,9,10,11,13,16,17,21,23,27,28,62,67,89,110,131,],[-99,-99,-99,-9,-7,-8,-99,-16,-99,-18,-99,-20,-4,34,-15,-17,-19,-10,-3,]),'NUM':([55,56,71,221,],[-44,73,-43,-45,]),'COLON':([12,15,19,22,34,54,63,81,90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,115,151,152,155,157,164,165,166,167,180,181,183,208,213,214,215,219,224,],[18,20,25,30,53,70,79,111,-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,144,176,-52,179,-85,-75,-72,-73,-74,-80,-63,-30,-51,-48,-49,-50,222,228,]),'COMMA':([74,90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,162,164,165,166,167,180,181,183,],[87,-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,-85,182,-75,-72,-73,-74,-80,-63,-30,]),'NEQ':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,164,165,166,167,173,174,180,181,183,208,213,214,215,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,-85,-75,-72,-73,-74,193,-52,-80,-63,-30,-51,-48,-49,-50,]),'BY':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,133,152,156,157,162,164,165,166,167,174,177,180,181,183,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,137,-88,137,137,137,-85,137,-75,137,-73,137,137,137,-80,-63,-30,]),'LPAR':([60,78,90,91,93,106,123,125,132,134,135,137,138,139,140,150,153,175,178,179,182,188,189,190,191,192,193,194,195,196,],[-91,91,-91,91,134,135,150,135,91,91,91,91,91,91,91,150,91,150,200,150,91,150,-95,-97,-96,-98,-94,-93,150,150,]),'STAGE':([29,78,84,91,117,118,122,123,124,126,132,134,135,137,138,139,140,147,148,150,153,154,175,179,182,186,187,188,189,190,191,192,193,194,195,196,199,209,212,217,220,222,223,225,229,232,235,],[37,101,119,101,-55,-57,119,101,-67,-56,101,101,101,101,101,101,101,-58,-59,101,101,-62,101,101,101,119,-69,101,-95,-97,-96,-98,-94,-93,101,101,-66,119,-60,-70,-99,119,-61,-65,119,119,-64,]),'PLUS':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,133,152,156,157,162,164,165,166,167,174,177,180,181,183,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,138,-88,138,138,138,-85,138,-75,-72,-73,-74,138,138,-80,-63,-30,]),'GT':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,164,165,166,167,173,174,180,181,183,208,213,214,215,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,-85,-75,-72,-73,-74,190,-52,-80,-63,-30,-51,-48,-49,-50,]),'STRING':([31,33,39,49,58,77,136,141,169,170,],[40,40,40,40,40,-24,-23,40,40,-27,]),'ACTUATORS':([48,],[63,]),'MODULE':([7,],[14,]),'TIMES':([83,90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,133,152,156,157,162,164,165,166,167,174,177,180,181,183,],[112,-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,139,-88,139,139,139,-85,139,-75,139,-73,139,139,139,-80,-63,-30,]),'GETINPUT':([153,],[178,]),'FALSE':([78,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,189,190,191,192,193,194,195,196,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-95,-97,-96,-98,-94,-93,105,105,]),'ELSE':([220,],[224,]),'LOCAL':([2,5,6,8,9,10,11,13,16,17,62,67,110,],[-99,-99,-99,-9,-7,-8,-99,-16,22,-18,-15,-17,-10,]),'SENSORS':([48,64,65,184,],[-99,81,-12,-11,]),'EFF':([211,],[219,]),'IF':([84,117,118,122,124,126,147,148,154,186,187,199,209,212,217,220,222,223,225,229,232,235,],[123,-55,-57,123,-67,-56,-58,-59,-62,123,-69,-66,123,-60,-70,-99,123,-61,-65,123,123,-64,]),'AND':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,164,165,166,167,173,174,180,181,183,208,213,214,215,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,-85,-75,-72,-73,-74,188,-52,-80,-63,-30,-51,-48,-49,-50,]),'LBRACE':([60,68,90,],[-91,83,132,]),'INDENT':([24,26,32,38,69,85,109,142,171,198,226,230,],[31,33,48,58,84,128,141,169,186,209,229,232,]),'INT':([31,33,39,49,58,77,136,141,169,170,],[41,41,41,41,41,-24,-23,41,41,-27,]),'FLOAT':([31,33,39,49,58,77,136,141,169,170,],[42,42,42,42,42,-24,-23,42,42,-27,]),'LEQ':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,164,165,166,167,173,174,180,181,183,208,213,214,215,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,-85,-75,-72,-73,-74,191,-52,-80,-63,-30,-51,-48,-49,-50,]),'BOOLEAN':([31,33,39,49,58,77,136,141,169,170,],[44,44,44,44,44,-24,-23,44,44,-27,]),'EXIT':([84,117,118,122,124,126,147,148,154,186,187,199,209,212,217,220,222,223,225,229,232,235,],[127,-55,-57,127,-67,-56,-58,-59,-62,127,-69,-66,127,-60,-70,-99,127,-61,-65,127,127,-64,]),'MINUS':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,133,152,156,157,162,164,165,166,167,174,177,180,181,183,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,140,-88,140,140,140,-85,140,-75,-72,-73,-74,140,140,-80,-63,-30,]),'INUM':([73,78,83,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,189,190,191,192,193,194,195,196,],[86,108,113,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-95,-97,-96,-98,-94,-93,108,108,]),'NOT':([150,],[175,]),'USING':([2,5,9,110,],[7,7,-7,-10,]),'ALLWRITE':([2,5,6,8,9,10,110,],[-99,-99,12,-9,-7,-8,-10,]),'$end':([3,72,129,],[0,-1,-2,]),'OR':([90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,108,157,164,165,166,167,173,174,180,181,183,208,213,214,215,],[-91,-71,-89,-79,-81,-78,-82,-86,-90,-77,-83,-84,-92,-87,-76,-88,-85,-75,-72,-73,-74,195,-52,-80,-63,-30,-51,-48,-49,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([31,39,58,141,169,],[39,39,39,39,39,]),'program':([0,],[3,]),'bracketexp':([78,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,195,196,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'elseblock':([220,],[223,]),'pid':([78,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,195,196,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'module':([2,5,],[5,5,]),'owner':([83,],[114,]),'num':([78,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,195,196,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'cond':([123,150,175,179,188,195,196,],[151,173,197,201,205,206,207,]),'rvdecls':([33,49,],[50,66,]),'ardecls':([11,],[16,]),'event':([35,55,],[55,55,]),'rvdecl':([33,49,],[49,49,]),'bval':([78,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,195,196,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'stmts':([84,122,186,209,229,232,],[116,149,204,216,231,234,]),'locdecls':([16,],[21,]),'asgn':([84,122,186,209,222,229,232,],[117,117,117,117,117,117,117,]),'actuatordecls':([48,],[64,]),'init':([28,],[35,]),'Numdecl':([56,],[72,]),'awdecls':([6,],[11,]),'noargs':([134,135,],[158,158,]),'exit':([84,122,186,209,222,229,232,],[118,118,118,118,118,118,118,]),'neargs':([134,135,182,],[159,159,202,]),'type':([31,33,39,49,58,141,169,],[45,51,45,51,45,45,45,]),'events':([35,55,],[56,71,]),'empty':([2,5,6,11,16,21,28,31,33,39,48,49,58,64,134,135,141,169,220,],[8,8,13,17,23,27,36,47,52,47,65,52,47,82,160,160,47,47,225,]),'effblock':([211,],[218,]),'exp':([78,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,195,196,],[107,133,152,156,162,162,164,165,166,167,174,177,152,152,162,152,152,152,]),'funccall':([78,84,91,122,123,132,134,135,137,138,139,140,150,153,175,179,182,186,188,195,196,209,222,229,232,],[102,120,102,120,102,102,102,102,102,102,102,102,102,102,102,102,102,120,102,102,102,120,120,120,120,]),'modulefunccall':([78,84,91,122,123,132,134,135,137,138,139,140,150,153,175,179,182,186,188,195,196,209,222,229,232,],[103,121,103,121,103,103,103,103,103,103,103,103,103,103,103,103,103,121,103,103,103,121,121,121,121,]),'args':([134,135,],[161,163,]),'null':([78,91,123,132,134,135,137,138,139,140,150,153,175,179,182,188,195,196,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'stmt':([84,122,186,209,222,229,232,],[122,122,122,122,227,122,122,]),'agent':([0,],[2,]),'stagechange':([84,122,186,209,222,229,232,],[124,124,124,124,124,124,124,]),'stagelist':([57,87,],[75,130,]),'varname':([45,51,78,84,91,122,123,132,134,135,137,138,139,140,146,150,153,175,179,182,186,188,195,196,209,222,229,232,],[61,68,106,125,106,125,106,106,106,106,106,106,106,106,172,106,106,106,106,106,125,106,106,106,125,125,125,125,]),'modules':([2,5,],[6,10,]),'wptstmt':([84,122,186,209,222,229,232,],[126,126,126,126,126,126,126,]),'stagedecl':([21,],[28,]),'sensordecls':([64,],[80,]),'decls':([31,39,58,141,169,],[46,59,76,168,185,]),'op':([173,],[196,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> agent modules awdecls ardecls locdecls stagedecl init events Numdecl','program',9,'p_program','parser.py',14),
  ('Numdecl -> NUM INUM NL','Numdecl',3,'p_Numdecl','parser.py',17),
  ('stagedecl -> DEF STAGE LCURLY stagelist RCURLY NL','stagedecl',6,'p_stagedecl','parser.py',21),
  ('stagedecl -> empty','stagedecl',1,'p_stagedecl','parser.py',22),
  ('stagelist -> LID COMMA stagelist','stagelist',3,'p_stagelist','parser.py',30),
  ('stagelist -> LID','stagelist',1,'p_stagelist','parser.py',31),
  ('agent -> AGENT CID NL','agent',3,'p_agent','parser.py',39),
  ('modules -> module modules','modules',2,'p_modules','parser.py',44),
  ('modules -> empty','modules',1,'p_modules','parser.py',45),
  ('module -> USING MODULE CID COLON NL INDENT actuatordecls sensordecls DEDENT','module',9,'p_module','parser.py',54),
  ('actuatordecls -> ACTUATORS COLON NL INDENT decls DEDENT','actuatordecls',6,'p_actuatordecls','parser.py',59),
  ('actuatordecls -> empty','actuatordecls',1,'p_actuatordecls','parser.py',60),
  ('sensordecls -> SENSORS COLON NL INDENT decls DEDENT','sensordecls',6,'p_sensordecls','parser.py',68),
  ('sensordecls -> empty','sensordecls',1,'p_sensordecls','parser.py',69),
  ('awdecls -> ALLWRITE COLON NL INDENT decls DEDENT','awdecls',6,'p_awdecls','parser.py',77),
  ('awdecls -> empty','awdecls',1,'p_awdecls','parser.py',78),
  ('ardecls -> ALLREAD COLON NL INDENT rvdecls DEDENT','ardecls',6,'p_ardecls','parser.py',86),
  ('ardecls -> empty','ardecls',1,'p_ardecls','parser.py',87),
  ('locdecls -> LOCAL COLON NL INDENT decls DEDENT','locdecls',6,'p_locdecls','parser.py',95),
  ('locdecls -> empty','locdecls',1,'p_locdecls','parser.py',96),
  ('decls -> decl decls','decls',2,'p_decls','parser.py',104),
  ('decls -> empty','decls',1,'p_decls','parser.py',105),
  ('decl -> type varname ASGN exp NL','decl',5,'p_decl','parser.py',114),
  ('decl -> type varname NL','decl',3,'p_decl','parser.py',115),
  ('rvdecls -> rvdecl rvdecls','rvdecls',2,'p_rvdecls','parser.py',123),
  ('rvdecls -> empty','rvdecls',1,'p_rvdecls','parser.py',124),
  ('rvdecl -> type varname LBRACE owner RBRACE NL','rvdecl',6,'p_rvdecl','parser.py',134),
  ('owner -> TIMES','owner',1,'p_owner','parser.py',138),
  ('owner -> INUM','owner',1,'p_owner','parser.py',139),
  ('funccall -> varname LPAR args RPAR','funccall',4,'p_funccall','parser.py',143),
  ('args -> neargs','args',1,'p_args','parser.py',148),
  ('args -> noargs','args',1,'p_args','parser.py',149),
  ('noargs -> empty','noargs',1,'p_noargs','parser.py',154),
  ('neargs -> exp','neargs',1,'p_neargs','parser.py',158),
  ('neargs -> exp COMMA neargs','neargs',3,'p_neargs','parser.py',159),
  ('type -> INT','type',1,'p_type','parser.py',168),
  ('type -> STRING','type',1,'p_type','parser.py',169),
  ('type -> FLOAT','type',1,'p_type','parser.py',170),
  ('type -> IPOS','type',1,'p_type','parser.py',171),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',172),
  ('init -> INIT COLON NL INDENT stmts DEDENT','init',6,'p_init','parser.py',178),
  ('init -> empty','init',1,'p_init','parser.py',179),
  ('events -> event events','events',2,'p_events','parser.py',186),
  ('events -> event','events',1,'p_events','parser.py',187),
  ('event -> LID COLON NL INDENT PRE COLON cond NL effblock DEDENT','event',10,'p_event','parser.py',194),
  ('effblock -> EFF COLON NL INDENT stmts DEDENT','effblock',6,'p_effblock','parser.py',200),
  ('effblock -> EFF COLON stmt','effblock',3,'p_effblock','parser.py',201),
  ('cond -> LPAR cond AND cond RPAR','cond',5,'p_cond','parser.py',210),
  ('cond -> LPAR cond OR cond RPAR','cond',5,'p_cond','parser.py',211),
  ('cond -> LPAR cond op cond RPAR','cond',5,'p_cond','parser.py',212),
  ('cond -> LPAR NOT cond RPAR','cond',4,'p_cond','parser.py',213),
  ('cond -> exp','cond',1,'p_cond','parser.py',214),
  ('stmts -> stmt stmts','stmts',2,'p_stmts','parser.py',223),
  ('stmts -> stmt','stmts',1,'p_stmts','parser.py',224),
  ('stmt -> asgn','stmt',1,'p_stmt','parser.py',231),
  ('stmt -> wptstmt','stmt',1,'p_stmt','parser.py',232),
  ('stmt -> exit','stmt',1,'p_stmt','parser.py',233),
  ('stmt -> funccall NL','stmt',2,'p_stmt','parser.py',234),
  ('stmt -> modulefunccall NL','stmt',2,'p_stmt','parser.py',235),
  ('stmt -> ATOMIC COLON NL INDENT stmts DEDENT','stmt',6,'p_stmt','parser.py',236),
  ('stmt -> IF cond COLON NL INDENT stmts DEDENT elseblock','stmt',8,'p_stmt','parser.py',237),
  ('exit -> EXIT NL','exit',2,'p_exit','parser.py',251),
  ('modulefunccall -> CID LPAR args RPAR','modulefunccall',4,'p_modulefunccall','parser.py',254),
  ('elseblock -> ELSE COLON NL INDENT stmts DEDENT','elseblock',6,'p_elseblock','parser.py',258),
  ('elseblock -> empty','elseblock',1,'p_elseblock','parser.py',259),
  ('asgn -> varname ASGN exp NL','asgn',4,'p_asgn','parser.py',267),
  ('asgn -> stagechange','asgn',1,'p_asgn','parser.py',268),
  ('moduleflag -> CID','moduleflag',1,'p_moduleflag','symparser.py',268),
  ('stagechange -> STAGE ASGN varname NL','stagechange',4,'p_stagechange','parser.py',276),
  ('wptstmt -> varname ASGN GETINPUT LPAR RPAR NL','wptstmt',6,'p_wptstmt','parser.py',280),
  ('exp -> bracketexp','exp',1,'p_exp','parser.py',287),
  ('exp -> exp PLUS exp','exp',3,'p_exp','parser.py',288),
  ('exp -> exp TIMES exp','exp',3,'p_exp','parser.py',289),
  ('exp -> exp MINUS exp','exp',3,'p_exp','parser.py',290),
  ('exp -> exp BY exp','exp',3,'p_exp','parser.py',291),
  ('exp -> varname','exp',1,'p_exp','parser.py',292),
  ('exp -> STAGE','exp',1,'p_exp','parser.py',293),
  ('exp -> bval','exp',1,'p_exp','parser.py',294),
  ('exp -> pid','exp',1,'p_exp','parser.py',295),
  ('exp -> LID LBRACE exp RBRACE','exp',4,'p_exp','parser.py',296),
  ('exp -> num','exp',1,'p_exp','parser.py',297),
  ('exp -> null','exp',1,'p_exp','parser.py',298),
  ('exp -> funccall','exp',1,'p_exp','parser.py',299),
  ('exp -> modulefunccall','exp',1,'p_exp','parser.py',300),
  ('bracketexp -> LPAR exp RPAR','bracketexp',3,'p_bracketexp','parser.py',310),
  ('bval -> TRUE','bval',1,'p_bval','parser.py',314),
  ('bval -> FALSE','bval',1,'p_bval','parser.py',315),
  ('num -> INUM','num',1,'p_num','parser.py',320),
  ('num -> FNUM','num',1,'p_num','parser.py',321),
  ('pid -> PID','pid',1,'p_pid','parser.py',326),
  ('varname -> LID','varname',1,'p_varname','parser.py',331),
  ('null -> NULL','null',1,'p_null','parser.py',336),
  ('op -> EQ','op',1,'p_op','parser.py',341),
  ('op -> NEQ','op',1,'p_op','parser.py',342),
  ('op -> GEQ','op',1,'p_op','parser.py',343),
  ('op -> LEQ','op',1,'p_op','parser.py',344),
  ('op -> GT','op',1,'p_op','parser.py',345),
  ('op -> LT','op',1,'p_op','parser.py',346),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',351),
]
