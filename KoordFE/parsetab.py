
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '9E31BA6EF5015183D53EADE988489ADC'
    
_lr_action_items = {'LID':([18,24,25,32,39,40,42,46,47,48,53,65,74,77,78,87,89,93,94,97,99,118,120,121,122,124,127,128,132,133,134,135,148,152,158,165,166,167,168,169,170,171,172,173,174,175,179,193,198,206,207,208,213,216,219,],[-85,31,-41,31,-38,62,-36,-35,-37,-39,62,-62,62,62,62,-55,-54,62,62,-14,62,62,-40,-56,-57,62,62,62,62,62,62,62,62,62,62,62,62,62,-81,-83,-82,-84,-80,-79,62,62,-63,62,-58,-44,62,-59,62,62,-61,]),'DEDENT':([27,29,36,38,41,44,50,51,52,54,58,59,60,65,72,74,76,79,82,87,88,89,90,93,121,122,123,131,137,159,160,161,162,166,179,184,185,188,193,195,196,197,198,202,203,208,211,213,215,216,217,218,219,],[-85,-85,-85,61,-17,66,70,71,-85,-22,-85,-15,-19,-62,-21,-85,97,-16,113,-55,120,-54,-53,-85,-56,-57,-52,-18,-85,182,183,-85,-23,-85,-63,195,196,198,-85,-9,-8,-24,-58,205,206,-59,-46,-85,217,-85,-45,219,-61,]),'CID':([3,11,65,74,87,89,93,121,122,166,179,193,198,207,208,213,216,219,],[7,16,-62,85,-55,-54,85,-56,-57,85,-63,85,-58,85,-59,85,85,-61,]),'ALLREAD':([8,61,66,],[13,-11,-10,]),'RPAR':([62,98,100,101,102,103,104,106,107,108,118,126,127,130,140,141,142,143,144,147,150,153,154,155,156,157,176,178,187,189,190,191,192,199,200,201,],[-78,-70,-64,-72,-69,-77,-71,-76,-75,-74,-85,-51,-85,153,-29,-28,-30,164,-31,153,178,-73,-68,-65,-66,-67,192,-27,-32,199,200,201,-50,-47,-48,-49,]),'ATOMIC':([65,74,87,89,93,121,122,166,179,193,198,207,208,213,216,219,],[-62,86,-55,-54,86,-56,-57,86,-63,86,-58,86,-59,86,86,-61,]),'MINUS':([62,98,100,101,102,103,104,105,106,107,108,126,130,144,147,151,153,154,155,156,157,178,],[-78,-70,-64,-72,-69,-77,-71,135,-76,-75,-74,135,135,135,135,135,-73,-68,-65,-66,-67,-27,]),'IPOS':([27,29,36,52,58,60,67,111,131,137,161,162,197,],[39,39,39,39,39,-19,39,39,-18,39,39,-23,-24,]),'NEQ':([62,98,100,101,102,103,104,106,107,108,146,147,153,154,155,156,157,178,192,199,200,201,],[-78,-70,-64,-72,-69,-77,-71,-76,-75,-74,172,-51,-73,-68,-65,-66,-67,-27,-50,-47,-48,-49,]),'PRE':([96,],[129,]),'GEQ':([62,98,100,101,102,103,104,106,107,108,146,147,153,154,155,156,157,178,192,199,200,201,],[-78,-70,-64,-72,-69,-77,-71,-76,-75,-74,168,-51,-73,-68,-65,-66,-67,-27,-50,-47,-48,-49,]),'NL':([7,15,17,21,26,30,37,43,56,62,63,64,81,91,92,98,100,101,102,103,104,105,106,107,108,109,110,114,119,126,139,149,151,153,154,155,156,157,164,178,180,181,186,192,199,200,201,207,212,],[12,20,22,28,35,55,60,65,75,-78,-33,79,112,121,122,-70,-64,-72,-69,-77,-71,131,-76,-75,-74,-33,-34,138,145,-51,162,177,179,-73,-68,-65,-66,-67,-60,-27,194,-20,197,-50,-47,-48,-49,210,214,]),'EQ':([62,98,100,101,102,103,104,106,107,108,146,147,153,154,155,156,157,178,192,199,200,201,],[-78,-70,-64,-72,-69,-77,-71,-76,-75,-74,173,-51,-73,-68,-65,-66,-67,-27,-50,-47,-48,-49,]),'LT':([45,62,98,100,101,102,103,104,106,107,108,146,147,153,154,155,156,157,178,192,199,200,201,],[67,-78,-70,-64,-72,-69,-77,-71,-76,-75,-74,171,-51,-73,-68,-65,-66,-67,-27,-50,-47,-48,-49,]),'AGENT':([0,],[3,]),'ASGN':([62,63,95,139,],[-78,77,128,163,]),'INIT':([18,97,],[23,-14,]),'FNUM':([77,94,99,118,124,127,128,132,133,134,135,148,152,163,165,167,168,169,170,171,172,173,174,175,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-81,-83,-82,-84,-80,-79,103,103,]),'COLON':([9,13,16,19,23,31,62,68,83,86,98,100,101,102,103,104,106,107,108,125,126,129,153,154,155,156,157,178,192,199,200,201,204,209,],[15,17,21,26,30,56,-78,81,114,119,-70,-64,-72,-69,-77,-71,-76,-75,-74,149,-51,152,-73,-68,-65,-66,-67,-27,-50,-47,-48,-49,207,212,]),'EFF':([194,],[204,]),'COMMA':([39,42,46,47,48,62,63,80,98,100,101,102,103,104,106,107,108,109,144,153,154,155,156,157,178,],[-38,-36,-35,-37,-39,-78,78,111,-70,-64,-72,-69,-77,-71,-76,-75,-74,78,165,-73,-68,-65,-66,-67,-27,]),'BY':([62,98,100,101,102,103,104,105,106,107,108,126,130,144,147,151,153,154,155,156,157,178,],[-78,-70,-64,-72,-69,-77,-71,132,-76,-75,-74,132,132,132,132,132,-73,-68,132,-66,132,-27,]),'LPAR':([62,77,85,94,95,99,102,118,124,127,128,132,133,134,135,148,152,165,167,168,169,170,171,172,173,174,175,],[-78,99,118,124,127,99,127,99,124,99,99,99,99,99,99,124,124,99,124,-81,-83,-82,-84,-80,-79,124,124,]),'$end':([2,18,24,25,32,33,34,57,97,120,206,],[0,-85,-85,-41,-85,-1,-43,-42,-14,-40,-44,]),'PLUS':([62,98,100,101,102,103,104,105,106,107,108,126,130,144,147,151,153,154,155,156,157,178,],[-78,-70,-64,-72,-69,-77,-71,133,-76,-75,-74,133,133,133,133,133,-73,-68,-65,-66,-67,-27,]),'GT':([39,42,46,47,48,62,98,100,101,102,103,104,106,107,108,136,146,147,153,154,155,156,157,178,192,199,200,201,],[-38,-36,-35,-37,-39,-78,-70,-64,-72,-69,-77,-71,-76,-75,-74,158,169,-51,-73,-68,-65,-66,-67,-27,-50,-47,-48,-49,]),'STRING':([27,29,36,52,58,60,67,111,131,137,161,162,197,],[42,42,42,42,42,-19,42,42,-18,42,42,-23,-24,]),'ACTUATORS':([49,],[68,]),'MODULE':([6,],[11,]),'TIMES':([62,84,98,100,101,102,103,104,105,106,107,108,126,130,144,147,151,153,154,155,156,157,178,],[-78,117,-70,-64,-72,-69,-77,-71,134,-76,-75,-74,134,134,134,134,134,-73,-68,134,-66,134,-27,]),'PASS':([27,29,65,74,87,89,93,121,122,137,161,166,179,193,198,207,208,213,216,219,],[43,43,-62,43,-55,-54,43,-56,-57,43,43,43,-63,43,-58,43,-59,43,43,-61,]),'FALSE':([77,94,99,118,124,127,128,132,133,134,135,148,152,165,167,168,169,170,171,172,173,174,175,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-81,-83,-82,-84,-80,-79,107,107,]),'ELSE':([205,],[209,]),'LOCAL':([14,70,71,],[19,-12,-13,]),'SENSORS':([69,182,183,],[83,-7,-6,]),'TRUE':([77,94,99,118,124,127,128,132,133,134,135,148,152,165,167,168,169,170,171,172,173,174,175,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-81,-83,-82,-84,-80,-79,108,108,]),'IF':([65,74,87,89,93,121,122,166,179,193,198,207,208,213,216,219,],[-62,94,-55,-54,94,-56,-57,94,-63,94,-58,94,-59,94,94,-61,]),'AND':([62,98,100,101,102,103,104,106,107,108,146,147,153,154,155,156,157,178,192,199,200,201,],[-78,-70,-64,-72,-69,-77,-71,-76,-75,-74,167,-51,-73,-68,-65,-66,-67,-27,-50,-47,-48,-49,]),'MAP':([27,36,58,60,131,137,161,],[45,45,45,-19,-18,45,45,]),'LBRACE':([62,73,],[-78,84,]),'INDENT':([20,22,28,35,55,75,112,138,145,177,210,214,],[27,29,49,58,74,96,137,161,166,193,213,216,]),'INT':([27,29,36,52,58,60,67,111,131,137,161,162,197,],[46,46,46,46,46,-19,46,46,-18,46,46,-23,-24,]),'FLOAT':([27,29,36,52,58,60,67,111,131,137,161,162,197,],[47,47,47,47,47,-19,47,47,-18,47,47,-23,-24,]),'RBRACE':([115,116,117,],[-26,139,-25,]),'LEQ':([62,98,100,101,102,103,104,106,107,108,146,147,153,154,155,156,157,178,192,199,200,201,],[-78,-70,-64,-72,-69,-77,-71,-76,-75,-74,170,-51,-73,-68,-65,-66,-67,-27,-50,-47,-48,-49,]),'BOOLEAN':([27,29,36,52,58,60,67,111,131,137,161,162,197,],[48,48,48,48,48,-19,48,48,-18,48,48,-23,-24,]),'INUM':([77,84,94,99,118,124,127,128,132,133,134,135,148,152,163,165,167,168,169,170,171,172,173,174,175,],[106,115,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,-81,-83,-82,-84,-80,-79,106,106,]),'NOT':([124,],[148,]),'USING':([1,5,12,113,],[6,6,-2,-5,]),'ALLWRITE':([4,5,10,113,],[9,-4,-3,-5,]),'OR':([62,98,100,101,102,103,104,106,107,108,146,147,153,154,155,156,157,178,192,199,200,201,],[-78,-70,-64,-72,-69,-77,-71,-76,-75,-74,174,-51,-73,-68,-65,-66,-67,-27,-50,-47,-48,-49,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([27,36,58,137,161,],[36,36,36,36,36,]),'bracketexp':([77,94,99,118,124,127,128,132,133,134,135,148,152,165,167,174,175,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'elseblock':([205,],[208,]),'module':([1,5,],[5,5,]),'owner':([84,],[116,]),'num':([77,94,99,118,124,127,128,132,133,134,135,148,152,163,165,167,174,175,],[104,104,104,104,104,104,104,104,104,104,104,104,104,186,104,104,104,104,]),'cond':([94,124,148,152,167,174,175,],[125,146,176,180,189,190,191,]),'mapdecl':([27,36,58,137,161,],[37,37,37,37,37,]),'pass':([27,29,74,93,137,161,166,193,207,213,216,],[38,51,87,87,159,184,87,87,87,87,87,]),'rvdecls':([29,52,],[50,72,]),'ardecls':([8,],[14,]),'event':([24,32,],[32,32,]),'rvdecl':([29,52,],[52,52,]),'bval':([77,94,99,118,124,127,128,132,133,134,135,148,152,165,167,174,175,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'varnames':([40,78,],[64,110,]),'stmts':([74,93,166,193,213,216,],[88,123,188,202,215,218,]),'locdecls':([14,],[18,]),'asgn':([74,93,166,193,207,213,216,],[89,89,89,89,89,89,89,]),'actuatordecls':([49,],[69,]),'init':([18,],[24,]),'program':([0,],[2,]),'awdecls':([4,],[8,]),'noargs':([118,127,],[140,140,]),'neargs':([118,127,165,],[141,141,187,]),'type':([27,29,36,52,58,67,111,137,161,],[40,53,40,53,40,80,136,40,40,]),'events':([24,32,],[33,57,]),'empty':([18,24,27,29,32,36,52,58,74,93,118,127,137,161,166,193,213,216,],[25,34,41,54,34,41,54,41,90,90,142,142,41,41,90,90,90,90,]),'effblock':([194,],[203,]),'exp':([77,94,99,118,124,127,128,132,133,134,135,148,152,165,167,174,175,],[105,126,130,144,147,144,151,154,155,156,157,126,126,144,126,126,126,]),'funccall':([74,77,93,94,99,118,124,127,128,132,133,134,135,148,152,165,166,167,174,175,193,207,213,216,],[91,101,91,101,101,101,101,101,101,101,101,101,101,101,101,101,91,101,101,101,91,91,91,91,]),'modulefunccall':([74,93,166,193,207,213,216,],[92,92,92,92,92,92,92,]),'args':([118,127,],[143,150,]),'stmt':([74,93,166,193,207,213,216,],[93,93,93,93,211,93,93,]),'agent':([0,],[1,]),'varname':([40,53,74,77,78,93,94,99,118,124,127,128,132,133,134,135,148,152,158,165,166,167,174,175,193,207,213,216,],[63,73,95,102,109,95,102,102,102,102,102,102,102,102,102,102,102,102,181,102,95,102,102,102,95,95,95,95,]),'modules':([1,5,],[4,10,]),'sensordecls':([69,],[82,]),'decls':([27,36,58,137,161,],[44,59,76,160,185,]),'op':([146,],[175,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> agent modules awdecls ardecls locdecls init events','program',7,'p_program','parser.py',15),
  ('agent -> AGENT CID NL','agent',3,'p_agent','parser.py',21),
  ('modules -> module modules','modules',2,'p_modules','parser.py',26),
  ('modules -> module','modules',1,'p_modules','parser.py',27),
  ('module -> USING MODULE CID COLON NL INDENT actuatordecls sensordecls DEDENT','module',9,'p_module','parser.py',35),
  ('actuatordecls -> ACTUATORS COLON NL INDENT decls DEDENT','actuatordecls',6,'p_actuatordecls','parser.py',40),
  ('actuatordecls -> ACTUATORS COLON NL INDENT pass DEDENT','actuatordecls',6,'p_actuatordecls','parser.py',41),
  ('sensordecls -> SENSORS COLON NL INDENT decls DEDENT','sensordecls',6,'p_sensordecls','parser.py',46),
  ('sensordecls -> SENSORS COLON NL INDENT pass DEDENT','sensordecls',6,'p_sensordecls','parser.py',47),
  ('awdecls -> ALLWRITE COLON NL INDENT decls DEDENT','awdecls',6,'p_awdecls','parser.py',52),
  ('awdecls -> ALLWRITE COLON NL INDENT pass DEDENT','awdecls',6,'p_awdecls','parser.py',53),
  ('ardecls -> ALLREAD COLON NL INDENT rvdecls DEDENT','ardecls',6,'p_ardecls','parser.py',63),
  ('ardecls -> ALLREAD COLON NL INDENT pass DEDENT','ardecls',6,'p_ardecls','parser.py',64),
  ('locdecls -> LOCAL COLON NL INDENT decls DEDENT','locdecls',6,'p_locdecls','parser.py',74),
  ('decls -> decl decls','decls',2,'p_decls','parser.py',81),
  ('decls -> type varnames NL','decls',3,'p_decls','parser.py',82),
  ('decls -> empty','decls',1,'p_decls','parser.py',83),
  ('decl -> type varname ASGN exp NL','decl',5,'p_decl','parser.py',97),
  ('decl -> mapdecl NL','decl',2,'p_decl','parser.py',98),
  ('mapdecl -> MAP LT type COMMA type GT varname','mapdecl',7,'p_mapdecl','parser.py',106),
  ('rvdecls -> rvdecl rvdecls','rvdecls',2,'p_rvdecls','parser.py',111),
  ('rvdecls -> empty','rvdecls',1,'p_rvdecls','parser.py',112),
  ('rvdecl -> type varname LBRACE owner RBRACE NL','rvdecl',6,'p_rvdecl','parser.py',117),
  ('rvdecl -> type varname LBRACE owner RBRACE ASGN num NL','rvdecl',8,'p_rvdecl','parser.py',118),
  ('owner -> TIMES','owner',1,'p_owner','parser.py',123),
  ('owner -> INUM','owner',1,'p_owner','parser.py',124),
  ('funccall -> varname LPAR args RPAR','funccall',4,'p_funccall','parser.py',128),
  ('args -> neargs','args',1,'p_args','parser.py',132),
  ('args -> noargs','args',1,'p_args','parser.py',133),
  ('noargs -> empty','noargs',1,'p_noargs','parser.py',138),
  ('neargs -> exp','neargs',1,'p_neargs','parser.py',142),
  ('neargs -> exp COMMA neargs','neargs',3,'p_neargs','parser.py',143),
  ('varnames -> varname','varnames',1,'p_varnames','parser.py',152),
  ('varnames -> varname COMMA varnames','varnames',3,'p_varnames','parser.py',153),
  ('type -> INT','type',1,'p_type','parser.py',166),
  ('type -> STRING','type',1,'p_type','parser.py',167),
  ('type -> FLOAT','type',1,'p_type','parser.py',168),
  ('type -> IPOS','type',1,'p_type','parser.py',169),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',170),
  ('init -> INIT COLON NL INDENT stmts DEDENT','init',6,'p_init','parser.py',177),
  ('init -> empty','init',1,'p_init','parser.py',178),
  ('events -> event events','events',2,'p_events','parser.py',184),
  ('events -> empty','events',1,'p_events','parser.py',185),
  ('event -> LID COLON NL INDENT PRE COLON cond NL effblock DEDENT','event',10,'p_event','parser.py',193),
  ('effblock -> EFF COLON NL INDENT stmts DEDENT','effblock',6,'p_effblock','parser.py',197),
  ('effblock -> EFF COLON stmt','effblock',3,'p_effblock','parser.py',198),
  ('cond -> LPAR cond AND cond RPAR','cond',5,'p_cond','parser.py',207),
  ('cond -> LPAR cond OR cond RPAR','cond',5,'p_cond','parser.py',208),
  ('cond -> LPAR cond op cond RPAR','cond',5,'p_cond','parser.py',209),
  ('cond -> LPAR NOT cond RPAR','cond',4,'p_cond','parser.py',210),
  ('cond -> exp','cond',1,'p_cond','parser.py',211),
  ('stmts -> stmt stmts','stmts',2,'p_stmts','parser.py',221),
  ('stmts -> empty','stmts',1,'p_stmts','parser.py',222),
  ('stmt -> asgn','stmt',1,'p_stmt','parser.py',230),
  ('stmt -> pass','stmt',1,'p_stmt','parser.py',231),
  ('stmt -> funccall NL','stmt',2,'p_stmt','parser.py',232),
  ('stmt -> modulefunccall NL','stmt',2,'p_stmt','parser.py',233),
  ('stmt -> ATOMIC COLON NL INDENT stmts DEDENT','stmt',6,'p_stmt','parser.py',234),
  ('stmt -> IF cond COLON NL INDENT stmts DEDENT elseblock','stmt',8,'p_stmt','parser.py',235),
  ('modulefunccall -> CID LPAR args RPAR','modulefunccall',4,'p_modulefunccall','parser.py',247),
  ('elseblock -> ELSE COLON NL INDENT stmts DEDENT','elseblock',6,'p_elseblock','parser.py',251),
  ('pass -> PASS NL','pass',2,'p_pass','parser.py',255),
  ('asgn -> varname ASGN exp NL','asgn',4,'p_asgn','parser.py',258),
  ('exp -> bracketexp','exp',1,'p_exp','parser.py',266),
  ('exp -> exp PLUS exp','exp',3,'p_exp','parser.py',267),
  ('exp -> exp TIMES exp','exp',3,'p_exp','parser.py',268),
  ('exp -> exp MINUS exp','exp',3,'p_exp','parser.py',269),
  ('exp -> exp BY exp','exp',3,'p_exp','parser.py',270),
  ('exp -> varname','exp',1,'p_exp','parser.py',271),
  ('exp -> bval','exp',1,'p_exp','parser.py',272),
  ('exp -> num','exp',1,'p_exp','parser.py',273),
  ('exp -> funccall','exp',1,'p_exp','parser.py',274),
  ('bracketexp -> LPAR exp RPAR','bracketexp',3,'p_bracketexp','parser.py',283),
  ('bval -> TRUE','bval',1,'p_bval','parser.py',287),
  ('bval -> FALSE','bval',1,'p_bval','parser.py',288),
  ('num -> INUM','num',1,'p_num','parser.py',293),
  ('num -> FNUM','num',1,'p_num','parser.py',294),
  ('varname -> LID','varname',1,'p_varname','parser.py',299),
  ('op -> EQ','op',1,'p_op','parser.py',305),
  ('op -> NEQ','op',1,'p_op','parser.py',306),
  ('op -> GEQ','op',1,'p_op','parser.py',307),
  ('op -> LEQ','op',1,'p_op','parser.py',308),
  ('op -> GT','op',1,'p_op','parser.py',309),
  ('op -> LT','op',1,'p_op','parser.py',310),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',315),
]
